#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WebAccountV2 API –∫–ª–∏–µ–Ω—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–æ–º
–í—ã–ø–æ–ª–Ω—è–µ—Ç 4 endpoint'–∞ WebAccountV2Api –ø–æ 1 —Ä–∞–∑—É –∫–∞–∂–¥—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import grpc
import json
import uuid
import sys
import os
import time
import pandas as pd
from datetime import datetime

sys.path.append(os.path.abspath("C:\\project_kicb\\stress_tests\\memory_leak"))
from protofile_pb2_grpc import WebAccountV2ApiStub
from protofile_pb2 import WebAccountsRequest

class WebAccountV2Client:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        options = [
            ('grpc.max_receive_message_length', -1),
            ('grpc.max_send_message_length', -1),
        ]
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        self.channel = grpc.secure_channel('newibanktest.kicb.net:443', grpc.ssl_channel_credentials(), options)
        self.stub = WebAccountV2ApiStub(self.channel)
        
        # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ JS –ø—Ä–∏–º–µ—Ä—É)
        self.session_data = {
            'sessionKey': '5MtEKcQbp3LZZXK5s3lNIH',      # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á
            'device-type': 'ios',
            'x-real-ip': '138.199.55.230',
            'user-agent': '{"ua": {"device": "iPhone 15 Pro", "osVersion": "18.0.1"}, "imei": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1", "deviceName": "", "deviceType": "ios", "macAddress": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1"}',
            'user-agent-c': '18.0.1; iPhone 15 Pro',   # –ö–∞–∫ –≤ JS –ø—Ä–∏–º–µ—Ä–µ
            'app-type': 'I'
        }
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        self.metrics = []
    
    def get_metadata(self):
        # –ü–æ JS –ø—Ä–∏–º–µ—Ä—É, –Ω–æ –∫–ª—é—á–∏ –≤ lowercase –¥–ª—è Python gRPC
        return [
            ('sessionkey', self.session_data['sessionKey']),     # sessionKey ‚Üí sessionkey
            ('device-type', self.session_data['device-type']),
            ('refid', str(uuid.uuid4())),                   # refId ‚Üí refid  
            ('x-real-ip', self.session_data['x-real-ip']),
            ('user-agent', self.session_data['user-agent']),
            ('user-agent-c', self.session_data['user-agent-c']),
            ('app-type', self.session_data['app-type'])
        ]
    
    def _calculate_request_size(self, request, metadata):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            # –†–∞–∑–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–±—É—Ñ–∞
            serialized_request = request.SerializeToString()
            request_size = len(serialized_request)
            
            # –†–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
            metadata_size = sum(len(str(key)) + len(str(value)) for key, value in metadata)
            
            return request_size + metadata_size
        except Exception:
            return 0
    
    def _calculate_response_size(self, response):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            if hasattr(response, 'data') and response.data:
                return len(response.data.encode('utf-8'))
            return 0
        except Exception:
            return 0
    
    def _record_metric(self, endpoint, start_time, end_time, request_size, response_size, success, data_length, error=None, iteration=1):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É"""
        metric = {
            'timestamp': datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3],
            'endpoint': endpoint,
            'iteration': iteration,
            'api_type': 'WebAccountV2',
            'duration_seconds': round(end_time - start_time, 3),
            'request_size_bytes': request_size,
            'response_size_bytes': response_size,
            'total_network_bytes': request_size + response_size,
            'backend_data_length': data_length,
            'status': 'SUCCESS' if success else 'ERROR',
            'error_code': error if error else ''
        }
        self.metrics.append(metric)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"   {status_icon} –ü–æ–ø—ã—Ç–∫–∞ {iteration}: {end_time - start_time:.3f}—Å, {request_size + response_size} bytes, {data_length} —Å–∏–º–≤–æ–ª–æ–≤")

    def send_request(self, endpoint, data=None, iteration=1):
        if data is None:
            data = {}
        
        request = WebAccountsRequest(code=endpoint, data=json.dumps(data))
        metadata = self.get_metadata()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        request_size = self._calculate_request_size(request, metadata)
        
        start_time = time.time()
        try:
            response = self.stub.makeWebAccountV2(request, metadata=metadata)
            end_time = time.time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            response_size = self._calculate_response_size(response)
            success = response.success
            data_length = len(response.data) if response.success and response.data else 0
            error = response.error.code if not response.success else None
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
            self._record_metric(endpoint, start_time, end_time, request_size, response_size, success, data_length, error, iteration)
            
            return {
                'success': success,
                'data': response.data if success else None,
                'error': error,
                'duration': end_time - start_time
            }
        except Exception as e:
            end_time = time.time()
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—à–∏–±–∫–∏
            self._record_metric(endpoint, start_time, end_time, request_size, 0, False, 0, str(e), iteration)
            return {
                'success': False,
                'data': None,
                'error': str(e),
                'duration': end_time - start_time
            }

    def test_endpoints_multiple_times(self, iterations=1):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ endpoint'—ã —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"""
        endpoints = [
            ('GET_LIST_OF_STORIES', {}),
            ('GET_ACCOUNTS', {'accountStatus': 'O'}),
            ('GET_EXCHANGE_RATE', {'rateType': 'cash'}),
            ('GET_LIST_OF_TEMPLATES', {'pageNumber': 1, 'pageSize': 20, 'templateName': ''})
        ]
        
        results_summary = {}
        
        print(f"=== WebAccountV2 API –¢–µ—Å—Ç ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è) ===\n")
        
        for endpoint, data in endpoints:
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {endpoint} ({iterations} —Ä–∞–∑):")
            
            endpoint_results = []
            successful_count = 0
            total_duration = 0
            
            for i in range(1, iterations + 1):
                result = self.send_request(endpoint, data, iteration=i)
                endpoint_results.append(result)
                
                if result['success']:
                    successful_count += 1
                    total_duration += result['duration']
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i < iterations:
                    time.sleep(0.1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            avg_duration = total_duration / successful_count if successful_count > 0 else 0
            success_rate = (successful_count / iterations) * 100
            
            results_summary[endpoint] = {
                'total_requests': iterations,
                'successful_requests': successful_count,
                'failed_requests': iterations - successful_count,
                'success_rate': success_rate,
                'average_duration': avg_duration,
                'total_duration': total_duration
            }
            
            print(f"   üìä –£—Å–ø–µ—à–Ω–æ: {successful_count}/{iterations} ({success_rate:.1f}%)")
            if successful_count > 0:
                print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_duration:.3f} —Å–µ–∫—É–Ω–¥")
        
        return results_summary
    
    def export_metrics_to_excel(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel —Ñ–∞–π–ª"""
        if not self.metrics:
            print("‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return None
            
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'webaccountv2_metrics_{timestamp}.xlsx'
        
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(self.metrics)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('timestamp')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_network = df['total_network_bytes'].sum()
            total_backend_data = df['backend_data_length'].sum()
            total_time = df['duration_seconds'].sum()
            success_rate = (df['status'] == 'SUCCESS').mean() * 100
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º
            endpoint_stats = df.groupby('endpoint').agg({
                'duration_seconds': ['count', 'mean', 'std', 'min', 'max'],
                'total_network_bytes': 'sum',
                'backend_data_length': 'mean',
                'status': lambda x: (x == 'SUCCESS').mean() * 100
            }).round(3)
            
            # –°–æ–∑–¥–∞–µ–º summary
            summary_data = {
                'metric': ['Total Network Usage (bytes)', 'Total Backend Data (chars)', 
                          'Total Time (seconds)', 'Success Rate (%)', 'Total Requests'],
                'value': [total_network, total_backend_data, round(total_time, 3), 
                         round(success_rate, 1), len(df)]
            }
            summary_df = pd.DataFrame(summary_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Detailed_Metrics', index=False)
                summary_df.to_excel(writer, sheet_name='Summary', index=False)
                endpoint_stats.to_excel(writer, sheet_name='Endpoint_Statistics')
            
            print(f"\n‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
            print(f"üìä –û–±—â–∏–π network usage: {total_network:,} bytes")
            print(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–∞: {total_backend_data:,} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.3f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return None

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if hasattr(self, 'channel'):
            self.channel.close()

if __name__ == "__main__":
    client = WebAccountV2Client()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —Å 1 –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        results = client.test_endpoints_multiple_times(iterations=1)
        
        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        print(f"\n=== –û–ë–©–ê–Ø –°–í–û–î–ö–ê ===")
        total_requests = sum(r['total_requests'] for r in results.values())
        total_successful = sum(r['successful_requests'] for r in results.values())
        overall_success_rate = (total_successful / total_requests) * 100 if total_requests > 0 else 0
        
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {total_successful}")
        print(f"–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}%")
        
        print(f"\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û ENDPOINT'–ê–ú ===")
        for endpoint, stats in results.items():
            print(f"{endpoint}:")
            print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['successful_requests']}/{stats['total_requests']} ({stats['success_rate']:.1f}%)")
            if stats['successful_requests'] > 0:
                print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_duration']:.3f} —Å–µ–∫—É–Ω–¥")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel
        print(f"\n=== –≠–ö–°–ü–û–†–¢ –ú–ï–¢–†–ò–ö ===")
        excel_file = client.export_metrics_to_excel()
        
    finally:
        client.close() 