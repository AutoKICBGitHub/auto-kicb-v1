#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebUtility –∏ WebAccount API
–í—ã–ø–æ–ª–Ω—è–µ—Ç 4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
1. GET_SELF_USER_DATA - WebUtility API
2. GET_ACCOUNTS - WebAccount API
3. GET_DEPOSITS - WebAccount API
4. LIST_TEMPLATE - WebAccount API

–°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏: network usage, —Ä–∞–∑–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
"""

import grpc
import json
import uuid
import sys
import os
import time
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ—Ç–æ—Ñ–∞–π–ª—É
sys.path.append(os.path.abspath("C:\\project_kicb\\stress_tests\\memory_leak"))

from protofile_pb2_grpc import WebUtilityApiStub, WebAccountApiStub
from protofile_pb2 import IncomingWebUtility, WebAccountsRequest

class CombinedClient:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        options = [
            ('grpc.max_receive_message_length', -1),
            ('grpc.max_send_message_length', -1),
        ]
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        self.channel = grpc.secure_channel('newibanktest.kicb.net:443', grpc.ssl_channel_credentials(), options)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
        self.utility_stub = WebUtilityApiStub(self.channel)
        self.account_stub = WebAccountApiStub(self.channel)
        
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ JS-–ø—Ä–∏–º–µ—Ä–∞)
        self.session_data = {
            'sessionKey': '5MtEKcQbp3LZZXK5s3lNIH',
            'sessionId': '5P2qfQVZcRGMldmHzyfAaI',
            'device-type': 'ios',
            'x-real-ip': '138.199.55.230',
            'user-agent': '{"ua": {"device": "iPhone 15 Pro", "osVersion": "18.0.1"}, "imei": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1", "deviceName": "", "deviceType": "ios", "macAddress": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1"}',
            'user-agent-c': '18.0.1; iPhone 15 Pro',
            'app-type': 'I'
        }
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        self.metrics = []
    
    def _get_utility_metadata_js_style(self):
        """–ú–µ—Ç–∞–¥–∞—Ç–∞ –¥–ª—è WebUtility: –≤—Å–µ –∫–ª—é—á–∏ lowercase –¥–ª—è gRPC"""
        return [
            ('sessionkey', self.session_data['sessionKey']),
            ('refid', str(uuid.uuid4())),
            ('device-type', self.session_data['device-type']),
            ('user-agent-c', self.session_data['user-agent-c'])
        ]
    
    def _get_account_metadata(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞—Ç—É –¥–ª—è WebAccount –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return [
            ('sessionkey', self.session_data['sessionKey']),
            ('sessionid', self.session_data['sessionId']),
            ('device-type', self.session_data['device-type']),
            ('refid', str(uuid.uuid4())),
            ('x-real-ip', self.session_data['x-real-ip']),
            ('user-agent', self.session_data['user-agent']),
            ('user-agent-c', self.session_data['user-agent-c']),
            ('app-type', self.session_data['app-type'])
        ]
    
    def _calculate_request_size(self, request, metadata):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            # –†–∞–∑–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–±—É—Ñ–∞
            serialized_request = request.SerializeToString()
            request_size = len(serialized_request)
            
            # –†–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
            metadata_size = sum(len(str(key)) + len(str(value)) for key, value in metadata)
            
            return request_size + metadata_size
        except Exception:
            return 0
    
    def _calculate_response_size(self, response):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            if hasattr(response, 'data') and response.data:
                return len(response.data.encode('utf-8'))
            return 0
        except Exception:
            return 0
    
    def _record_metric(self, endpoint, api_type, start_time, end_time, request_size, response_size, success, data_length, error=None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É"""
        metric = {
            'timestamp': datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3],
            'endpoint': endpoint,
            'api_type': api_type,
            'duration_seconds': round(end_time - start_time, 3),
            'request_size_bytes': request_size,
            'response_size_bytes': response_size,
            'total_network_bytes': request_size + response_size,
            'backend_data_length': data_length,
            'status': 'SUCCESS' if success else 'ERROR',
            'error_code': error if error else ''
        }
        self.metrics.append(metric)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É
        print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∞: {request_size + response_size} bytes network, {data_length} —Å–∏–º–≤–æ–ª–æ–≤ —Å –±—ç–∫–∞")
    
    def call_get_self_user_data(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç GET_SELF_USER_DATA —á–µ—Ä–µ–∑ WebUtility API (—Ç–æ–ª—å–∫–æ JS-style)"""
        request = IncomingWebUtility(code='GET_SELF_USER_DATA', data=json.dumps({}))
        metadata = self._get_utility_metadata_js_style()
        
        print('Request:', request)
        print('Metadata:', metadata)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        request_size = self._calculate_request_size(request, metadata)
        
        start_time = time.time()
        try:
            response = self.utility_stub.makeWebUtility(request, metadata=metadata)
            end_time = time.time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            response_size = self._calculate_response_size(response)
            success = response.success if hasattr(response, 'success') else bool(response.data)
            data_length = len(response.data) if response.data else 0
            error = response.error.code if hasattr(response, 'error') and response.error else None
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
            self._record_metric('GET_SELF_USER_DATA', 'WebUtility', start_time, end_time, 
                              request_size, response_size, success, data_length, error)
            
            return {
                'success': success,
                'data': response.data if response.data else None,
                'error': error
            }
        except Exception as e:
            end_time = time.time()
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—à–∏–±–∫–∏
            self._record_metric('GET_SELF_USER_DATA', 'WebUtility', start_time, end_time, 
                              request_size, 0, False, 0, str(e))
            return {
                'success': False,
                'data': None,
                'error': str(e)
            }

    def call_webaccount_endpoint(self, endpoint):
        """–í—ã–∑—ã–≤–∞–µ—Ç endpoint —á–µ—Ä–µ–∑ WebAccount API"""
        request = WebAccountsRequest(code=endpoint, data=json.dumps({}))
        metadata = self._get_account_metadata()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        request_size = self._calculate_request_size(request, metadata)
        
        start_time = time.time()
        try:
            response = self.account_stub.makeWebAccount(request, metadata=metadata)
            end_time = time.time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            response_size = self._calculate_response_size(response)
            success = response.success
            data_length = len(response.data) if response.success and response.data else 0
            error = response.error.code if not response.success else None
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
            self._record_metric(endpoint, 'WebAccount', start_time, end_time, 
                              request_size, response_size, success, data_length, error)
            
            return {
                'success': success,
                'data': response.data if success else None,
                'error': error
            }
        except Exception as e:
            end_time = time.time()
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—à–∏–±–∫–∏
            self._record_metric(endpoint, 'WebAccount', start_time, end_time, 
                              request_size, 0, False, 0, str(e))
            return {
                'success': False,
                'data': None,
                'error': str(e)
            }

    def execute_combined_requests(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ 4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        results = {}
        print("=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í ===")
        print(f"üìä –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏: network usage, —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n")
        
        # 1. GET_SELF_USER_DATA
        print(f"1. –í—ã–ø–æ–ª–Ω—è—é GET_SELF_USER_DATA (utility API)...")
        result = self.call_get_self_user_data()
        status = "‚úÖ" if result['success'] else "‚ùå"
        data_len = len(result['data']) if result['data'] else 0
        error_info = f" - {result['error']}" if result['error'] else ""
        print(f"   {status} {data_len} —Å–∏–º–≤–æ–ª–æ–≤{error_info}")
        results['GET_SELF_USER_DATA'] = result
        
        # 2-4. WebAccount –∑–∞–ø—Ä–æ—Å—ã
        webaccount_requests = ['GET_ACCOUNTS', 'GET_DEPOSITS', 'LIST_TEMPLATE']
        for i, endpoint in enumerate(webaccount_requests, 2):
            print(f"\n{i}. –í—ã–ø–æ–ª–Ω—è—é {endpoint} (account API)...")
            result = self.call_webaccount_endpoint(endpoint)
            results[endpoint] = result
            status = "‚úÖ" if result['success'] else "‚ùå"
            data_len = len(result['data']) if result['data'] else 0
            error_info = f" - {result['error']}" if result['error'] else ""
            print(f"   {status} {data_len} —Å–∏–º–≤–æ–ª–æ–≤{error_info}")
            if i < len(webaccount_requests) + 1:
                time.sleep(0.1)
        
        return results
    
    def export_metrics_to_excel(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel —Ñ–∞–π–ª"""
        if not self.metrics:
            print("‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return None
            
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'combined_metrics_{timestamp}.xlsx'
        
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(self.metrics)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('timestamp')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_network = df['total_network_bytes'].sum()
            total_backend_data = df['backend_data_length'].sum()
            total_time = df['duration_seconds'].sum()
            success_rate = (df['status'] == 'SUCCESS').mean() * 100
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º
            endpoint_stats = df.groupby('endpoint').agg({
                'duration_seconds': ['count', 'mean', 'std', 'min', 'max'],
                'total_network_bytes': 'sum',
                'backend_data_length': 'mean',
                'status': lambda x: (x == 'SUCCESS').mean() * 100
            }).round(3)
            
            # –°–æ–∑–¥–∞–µ–º summary
            summary_data = {
                'metric': ['Total Network Usage (bytes)', 'Total Backend Data (chars)', 
                          'Total Time (seconds)', 'Success Rate (%)', 'Total Requests'],
                'value': [total_network, total_backend_data, round(total_time, 3), 
                         round(success_rate, 1), len(df)]
            }
            summary_df = pd.DataFrame(summary_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Detailed_Metrics', index=False)
                summary_df.to_excel(writer, sheet_name='Summary', index=False)
                endpoint_stats.to_excel(writer, sheet_name='Endpoint_Statistics')
            
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
            print(f"üìä –û–±—â–∏–π network usage: {total_network:,} bytes")
            print(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–∞: {total_backend_data:,} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.3f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return None

    def get_summary(self, results):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        total_requests = len(results)
        successful_requests = sum(1 for r in results.values() if r['success'])
        failed_requests = total_requests - successful_requests
        
        total_data_size = sum(len(r['data']) if r['data'] else 0 for r in results.values())
        
        return {
            'total_requests': total_requests,
            'successful_requests': successful_requests,
            'failed_requests': failed_requests,
            'total_data_size': total_data_size,
            'success_rate': (successful_requests / total_requests) * 100 if total_requests > 0 else 0
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if hasattr(self, 'channel'):
            self.channel.close()

if __name__ == "__main__":
    client = CombinedClient()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        results = client.execute_combined_requests()
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        summary = client.get_summary(results)
        
        print(f"\n=== –°–í–û–î–ö–ê ===")
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['total_requests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['successful_requests']}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['failed_requests']}")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {summary['total_data_size']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel
        print(f"\n=== –≠–ö–°–ü–û–†–¢ –ú–ï–¢–†–ò–ö ===")
        excel_file = client.export_metrics_to_excel()
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\n=== –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        for endpoint, result in results.items():
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result['success'] else "‚ùå –û–®–ò–ë–ö–ê"
            data_info = f"–î–∞–Ω–Ω—ã—Ö: {len(result['data'])} —Å–∏–º–≤–æ–ª–æ–≤" if result['data'] else "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"
            error_info = f"–û—à–∏–±–∫–∞: {result['error']}" if result['error'] else ""
            
            print(f"{endpoint}: {status}")
            print(f"  {data_info}")
            if error_info:
                print(f"  {error_info}")
            
    finally:
        client.close() 