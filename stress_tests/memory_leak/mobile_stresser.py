import grpc
import os
import sys
import json
import time
import uuid
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ—Ç–æ—Ñ–∞–π–ª
sys.path.append(os.path.abspath("C:\\project_kicb\\stress_tests\\memory_leak"))

from protofile_pb2_grpc import WebAccountApiStub
from protofile_pb2 import WebAccountsRequest

class MobileStresser:
    def __init__(self, session_data=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            session_data (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        print("–°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        
        # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ê–ö–¢–£–ê–õ–¨–ù–´–ï –∏–∑ JS –∫–æ–¥–∞!)
        self.default_session_data = {
            'sessionKey': '2x6tKgoGDy1h9UV649qESQ',  # ‚úÖ –ò–∑ —Ä–∞–±–æ—á–µ–≥–æ JS –∫–æ–¥–∞
            'sessionId': '4R9fQdPKecpMslFeZ9vIVb',   # ‚úÖ –ò–∑ —Ä–∞–±–æ—á–µ–≥–æ JS –∫–æ–¥–∞
            'device-type': 'ios',
            'x-real-ip': '138.199.55.230',
            'user-agent': '{"ua": {"device": "iPhone 15 Pro", "osVersion": "18.0.1"}, "imei": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1", "deviceName": "", "deviceType": "ios", "macAddress": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1"}',
            'user-agent-c': '18.0.1; iPhone 15 Pro',
            'app-type': 'I'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.session_data = session_data if session_data else self.default_session_data
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not session_data:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JS –∫–æ–¥–∞")
            print(f"üìã sessionKey: {self.session_data['sessionKey'][:10]}...")
            print(f"üìã sessionId: {self.session_data['sessionId'][:10]}...")
        else:
            print("üîë –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        try:
            self.channel = grpc.secure_channel(
                'newibanktest.kicb.net:443', 
                grpc.ssl_channel_credentials()
            )
            print("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.stub = WebAccountApiStub(self.channel)
            print("‚úÖ Stub —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            try:
                state = self.channel.get_state()
                print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {state}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
        
        self.endpoints = [
            'GET_ACCOUNTS',
            'GET_LOANS', 
            'GET_DEPOSITS'
        ]
    
    def generate_ref_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π refId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        return str(uuid.uuid4())
    
    def update_session_data(self, new_session_data):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            new_session_data (dict): –ù–æ–≤—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        self.session_data.update(new_session_data)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {list(new_session_data.keys())}")
    
    def get_metadata(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞—Ç—É —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤ JS –∫–æ–¥–µ"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π refId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        ref_id = self.generate_ref_id()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞—Ç—É –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –≤ JS –∫–æ–¥–µ
        metadata = [
            ('sessionkey', self.session_data.get('sessionKey', '')),
            ('sessionid', self.session_data.get('sessionId', '')),
            ('device-type', self.session_data.get('device-type', 'ios')),
            ('refid', ref_id),
            ('x-real-ip', self.session_data.get('x-real-ip', '138.199.55.230')),
            ('user-agent', self.session_data.get('user-agent', '{"ua": {"device": "iPhone 15 Pro", "osVersion": "18.0.1"}, "imei": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1", "deviceName": "", "deviceType": "ios", "macAddress": "9C2F553F-06EB-42C2-AF92-5D3BBF9304E1"}')),
            ('user-agent-c', self.session_data.get('user-agent-c', '18.0.1; iPhone 15 Pro')),
            ('app-type', self.session_data.get('app-type', 'I'))
        ]
        
        print(f"üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π refId: {ref_id}")
        
        return tuple(metadata)
    
    def validate_session(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['sessionKey', 'sessionId']
        for field in required_fields:
            if field not in self.session_data or not self.session_data[field]:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É session –∫–ª—é—á–µ–π
        session_key = self.session_data['sessionKey']
        session_id = self.session_data['sessionId']
        
        if len(session_key) < 20:
            print(f"‚ùå sessionKey —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(session_key)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
            
        if len(session_id) < 20:
            print(f"‚ùå sessionId —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(session_id)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True
        
    def test_endpoint(self, endpoint_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ endpoint"""
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint_name} ---")
        
        try:
            print("1. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞—Ç—É...")
            metadata = self.get_metadata()
            print(f"‚úÖ –ú–µ—Ç–∞–¥–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞ ({len(metadata)} –ø–æ–ª–µ–π)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"   sessionKey: {self.session_data['sessionKey'][:10]}...")
            print(f"   sessionId: {self.session_data['sessionId'][:10]}...")
            print(f"   device-type: {self.session_data.get('device-type', 'ios')}")
            
            print("2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –≤ JS –∫–æ–¥–µ
            request_data = {}
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request_data}")
            
            print("3. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞...")
            request = WebAccountsRequest(
                code=endpoint_name,
                data=json.dumps(request_data)
            )
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω - –∫–æ–¥: {request.code}")
            
            print("4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            print(f"   –°–µ—Ä–≤–µ—Ä: newibanktest.kicb.net:443")
            print(f"   –ú–µ—Ç–æ–¥: makeWebAccount")
            print(f"   Endpoint: {endpoint_name}")
            print(f"   –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
            
            start_time = time.time()
            response = self.stub.makeWebAccount(request, metadata=metadata)
            end_time = time.time()
            
            print("5. –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!")
            print(f"   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {(end_time - start_time):.2f}—Å")
            print(f"   Success: {response.success}")
            
            if response.success:
                print(f"‚úÖ {endpoint_name}: –£—Å–ø–µ—à–Ω–æ")
                if hasattr(response, 'data') and response.data:
                    print(f"   –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(response.data)} —Å–∏–º–≤–æ–ª–æ–≤")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    try:
                        parsed_data = json.loads(response.data)
                        if isinstance(parsed_data, dict) and 'result' in parsed_data:
                            result = parsed_data['result']
                            if isinstance(result, list):
                                print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result)}")
                            elif isinstance(result, dict):
                                print(f"   –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: {list(result.keys())}")
                    except:
                        pass
                return True
            else:
                error_code = response.error.code if response.error else "UNKNOWN_ERROR"
                print(f"‚ùå {endpoint_name}: –û—à–∏–±–∫–∞ - {error_code}")
                
                if response.error:
                    print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.error.code}")
                    if hasattr(response.error, 'message'):
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.error.message}")
                    if hasattr(response.error, 'details'):
                        print(f"   –î–µ—Ç–∞–ª–∏: {response.error.details}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
                if error_code == "INVALID_SESSION_KEY":
                    print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û–±–Ω–æ–≤–∏—Ç–µ sessionKey!")
                    print("   –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π sessionKey —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                elif error_code == "SESSION_EXPIRED":
                    print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                elif error_code == "INVALID_SESSION_ID":
                    print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û–±–Ω–æ–≤–∏—Ç–µ sessionId!")
                    
                return False
            
        except grpc.RpcError as e:
            print(f"‚ùå gRPC –æ—à–∏–±–∫–∞:")
            print(f"   –ö–æ–¥: {e.code()}")
            print(f"   –î–µ—Ç–∞–ª–∏: {e.details()}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ gRPC –æ—à–∏–±–æ–∫
            if e.code() == grpc.StatusCode.UNAUTHENTICATED:
                print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
            elif e.code() == grpc.StatusCode.PERMISSION_DENIED:
                print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            elif e.code() == grpc.StatusCode.UNAVAILABLE:
                print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            return False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            import traceback
            print(f"   Traceback: {traceback.format_exc()}")
            return False

    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö endpoints"""
        print("=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"–ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(self.endpoints)} endpoints")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–æ–≤
        if not self.validate_session():
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        success_count = 0
        total_count = len(self.endpoints)
        
        for i, endpoint in enumerate(self.endpoints, 1):
            print(f"\n[{i}/{total_count}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint}")
            if self.test_endpoint(endpoint):
                success_count += 1
        
        print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
        print(f"–ù–µ—É–¥–∞—á–Ω–æ: {total_count - success_count}/{total_count}")
        
        if success_count == 0:
            print("\n‚ùå –í–°–ï –¢–ï–°–¢–´ –ù–ï–£–°–ü–ï–®–ù–´!")
            print("üîÑ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –£—Å—Ç–∞—Ä–µ–≤—à–∏–π sessionKey")
            print("   2. –ò—Å—Ç–µ–∫—à–∞—è sessionId")
            print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
            print("\nüí° –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞!")
        elif success_count == total_count:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–´!")
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        else:
            print(f"\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: {success_count}/{total_count}")
            print("üîç –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–≤")
        
        print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        if hasattr(self, 'channel'):
            self.channel.close()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Mobile Stresser")
    print("=" * 50)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    session_data = None
    session_file = "current_session.json"
    
    if os.path.exists(session_file):
        try:
            print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {session_file}")
            with open(session_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            print("‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
            if 'saved_at' in session_data:
                from datetime import datetime  
                saved_time = datetime.fromisoformat(session_data['saved_at'])
                age = datetime.now() - saved_time
                print(f"üìÖ –í–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏: {age}")
                
                if age.total_seconds() > 3600:  # 1 —á–∞—Å
                    print("‚ö†Ô∏è –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            session_data = None
    else:
        print(f"üìã –§–∞–π–ª {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JS –∫–æ–¥–∞")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MobileStresser
    if session_data:
        print("üîë –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
        mobile_stresser = MobileStresser(session_data=session_data)
    else:
        print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ JS –∫–æ–¥–∞")
        mobile_stresser = MobileStresser()
    
    try:
        mobile_stresser.run_tests()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        mobile_stresser.close()
        print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
