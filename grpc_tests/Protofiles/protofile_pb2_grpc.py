# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protofile_pb2 as protofile__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc_tests package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protofile_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc_tests module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WebAuthApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.authenticate = channel.unary_unary(
                '/dmz_api.WebAuthApi/authenticate',
                request_serializer=protofile__pb2.LoginRequest.SerializeToString,
                response_deserializer=protofile__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.getSecondFactorCredential = channel.unary_unary(
                '/dmz_api.WebAuthApi/getSecondFactorCredential',
                request_serializer=protofile__pb2.GetSecondFactorCredentialRequest.SerializeToString,
                response_deserializer=protofile__pb2.GetSecondFactorCredentialResponse.FromString,
                _registered_method=True)
        self.confirmSecondFactor = channel.unary_unary(
                '/dmz_api.WebAuthApi/confirmSecondFactor',
                request_serializer=protofile__pb2.ConfirmSecondFactorRequest.SerializeToString,
                response_deserializer=protofile__pb2.ConfirmSecondFactorResponse.FromString,
                _registered_method=True)
        self.retrySendingOtpToLogin = channel.unary_unary(
                '/dmz_api.WebAuthApi/retrySendingOtpToLogin',
                request_serializer=protofile__pb2.RetrySendingOtpToLoginRequest.SerializeToString,
                response_deserializer=protofile__pb2.RetrySendingOtpToLoginResponse.FromString,
                _registered_method=True)
        self.validateSession = channel.unary_unary(
                '/dmz_api.WebAuthApi/validateSession',
                request_serializer=protofile__pb2.ValidateSessionRequest.SerializeToString,
                response_deserializer=protofile__pb2.ValidateSessionResponse.FromString,
                _registered_method=True)
        self.setPassword = channel.unary_unary(
                '/dmz_api.WebAuthApi/setPassword',
                request_serializer=protofile__pb2.SetPasswordRequest.SerializeToString,
                response_deserializer=protofile__pb2.SetPasswordResponse.FromString,
                _registered_method=True)
        self.setAnswerForSecurityQuestion = channel.unary_unary(
                '/dmz_api.WebAuthApi/setAnswerForSecurityQuestion',
                request_serializer=protofile__pb2.SetAnswerForSecQuestionRequest.SerializeToString,
                response_deserializer=protofile__pb2.SetAnswerForSecQuestionResponse.FromString,
                _registered_method=True)
        self.restorePassword = channel.unary_unary(
                '/dmz_api.WebAuthApi/restorePassword',
                request_serializer=protofile__pb2.RestorePassRequest.SerializeToString,
                response_deserializer=protofile__pb2.RestorePassResponse.FromString,
                _registered_method=True)
        self.sendOtpDuringRestore = channel.unary_unary(
                '/dmz_api.WebAuthApi/sendOtpDuringRestore',
                request_serializer=protofile__pb2.SendOtpDuringRestoreRequest.SerializeToString,
                response_deserializer=protofile__pb2.SendOtpDuringRestoreResponse.FromString,
                _registered_method=True)
        self.confirmOtpDuringRestore = channel.unary_unary(
                '/dmz_api.WebAuthApi/confirmOtpDuringRestore',
                request_serializer=protofile__pb2.ConfirmOtpDuringRestoreRequest.SerializeToString,
                response_deserializer=protofile__pb2.ConfirmOtpDuringRestoreResponse.FromString,
                _registered_method=True)
        self.confirmAnswerForSecurityQuestion = channel.unary_unary(
                '/dmz_api.WebAuthApi/confirmAnswerForSecurityQuestion',
                request_serializer=protofile__pb2.ConfirmAnswerForSecurityQuestionRequest.SerializeToString,
                response_deserializer=protofile__pb2.ConfirmAnswerForSecurityQuestionResponse.FromString,
                _registered_method=True)
        self.exit = channel.unary_unary(
                '/dmz_api.WebAuthApi/exit',
                request_serializer=protofile__pb2.ExitRequest.SerializeToString,
                response_deserializer=protofile__pb2.ExitResponse.FromString,
                _registered_method=True)
        self.selfRegistration = channel.unary_unary(
                '/dmz_api.WebAuthApi/selfRegistration',
                request_serializer=protofile__pb2.selfRegistrationRequest.SerializeToString,
                response_deserializer=protofile__pb2.selfRegistrationResponse.FromString,
                _registered_method=True)
        self.getGlobalIbankStatus = channel.unary_unary(
                '/dmz_api.WebAuthApi/getGlobalIbankStatus',
                request_serializer=protofile__pb2.getGlobalIbankStatusRequest.SerializeToString,
                response_deserializer=protofile__pb2.getGlobalIbankStatusResponse.FromString,
                _registered_method=True)
        self.selfRegistrationV2 = channel.unary_unary(
                '/dmz_api.WebAuthApi/selfRegistrationV2',
                request_serializer=protofile__pb2.SelfRegistrationRequestV2.SerializeToString,
                response_deserializer=protofile__pb2.SelfRegistrationResponseV2.FromString,
                _registered_method=True)
        self.confirmSelfRegistration = channel.unary_unary(
                '/dmz_api.WebAuthApi/confirmSelfRegistration',
                request_serializer=protofile__pb2.ConfirmSelfRegistrationRequest.SerializeToString,
                response_deserializer=protofile__pb2.ConfirmSelfRegistrationResponse.FromString,
                _registered_method=True)
        self.getValidAppVersion = channel.unary_unary(
                '/dmz_api.WebAuthApi/getValidAppVersion',
                request_serializer=protofile__pb2.getValidAppVersionRequest.SerializeToString,
                response_deserializer=protofile__pb2.getValidAppVersionResponse.FromString,
                _registered_method=True)


class WebAuthApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSecondFactorCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def confirmSecondFactor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def retrySendingOtpToLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAnswerForSecurityQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restorePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendOtpDuringRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def confirmOtpDuringRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def confirmAnswerForSecurityQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selfRegistration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGlobalIbankStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selfRegistrationV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def confirmSelfRegistration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getValidAppVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebAuthApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=protofile__pb2.LoginRequest.FromString,
                    response_serializer=protofile__pb2.LoginResponse.SerializeToString,
            ),
            'getSecondFactorCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.getSecondFactorCredential,
                    request_deserializer=protofile__pb2.GetSecondFactorCredentialRequest.FromString,
                    response_serializer=protofile__pb2.GetSecondFactorCredentialResponse.SerializeToString,
            ),
            'confirmSecondFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.confirmSecondFactor,
                    request_deserializer=protofile__pb2.ConfirmSecondFactorRequest.FromString,
                    response_serializer=protofile__pb2.ConfirmSecondFactorResponse.SerializeToString,
            ),
            'retrySendingOtpToLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.retrySendingOtpToLogin,
                    request_deserializer=protofile__pb2.RetrySendingOtpToLoginRequest.FromString,
                    response_serializer=protofile__pb2.RetrySendingOtpToLoginResponse.SerializeToString,
            ),
            'validateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.validateSession,
                    request_deserializer=protofile__pb2.ValidateSessionRequest.FromString,
                    response_serializer=protofile__pb2.ValidateSessionResponse.SerializeToString,
            ),
            'setPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.setPassword,
                    request_deserializer=protofile__pb2.SetPasswordRequest.FromString,
                    response_serializer=protofile__pb2.SetPasswordResponse.SerializeToString,
            ),
            'setAnswerForSecurityQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.setAnswerForSecurityQuestion,
                    request_deserializer=protofile__pb2.SetAnswerForSecQuestionRequest.FromString,
                    response_serializer=protofile__pb2.SetAnswerForSecQuestionResponse.SerializeToString,
            ),
            'restorePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.restorePassword,
                    request_deserializer=protofile__pb2.RestorePassRequest.FromString,
                    response_serializer=protofile__pb2.RestorePassResponse.SerializeToString,
            ),
            'sendOtpDuringRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.sendOtpDuringRestore,
                    request_deserializer=protofile__pb2.SendOtpDuringRestoreRequest.FromString,
                    response_serializer=protofile__pb2.SendOtpDuringRestoreResponse.SerializeToString,
            ),
            'confirmOtpDuringRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.confirmOtpDuringRestore,
                    request_deserializer=protofile__pb2.ConfirmOtpDuringRestoreRequest.FromString,
                    response_serializer=protofile__pb2.ConfirmOtpDuringRestoreResponse.SerializeToString,
            ),
            'confirmAnswerForSecurityQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.confirmAnswerForSecurityQuestion,
                    request_deserializer=protofile__pb2.ConfirmAnswerForSecurityQuestionRequest.FromString,
                    response_serializer=protofile__pb2.ConfirmAnswerForSecurityQuestionResponse.SerializeToString,
            ),
            'exit': grpc.unary_unary_rpc_method_handler(
                    servicer.exit,
                    request_deserializer=protofile__pb2.ExitRequest.FromString,
                    response_serializer=protofile__pb2.ExitResponse.SerializeToString,
            ),
            'selfRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.selfRegistration,
                    request_deserializer=protofile__pb2.selfRegistrationRequest.FromString,
                    response_serializer=protofile__pb2.selfRegistrationResponse.SerializeToString,
            ),
            'getGlobalIbankStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getGlobalIbankStatus,
                    request_deserializer=protofile__pb2.getGlobalIbankStatusRequest.FromString,
                    response_serializer=protofile__pb2.getGlobalIbankStatusResponse.SerializeToString,
            ),
            'selfRegistrationV2': grpc.unary_unary_rpc_method_handler(
                    servicer.selfRegistrationV2,
                    request_deserializer=protofile__pb2.SelfRegistrationRequestV2.FromString,
                    response_serializer=protofile__pb2.SelfRegistrationResponseV2.SerializeToString,
            ),
            'confirmSelfRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.confirmSelfRegistration,
                    request_deserializer=protofile__pb2.ConfirmSelfRegistrationRequest.FromString,
                    response_serializer=protofile__pb2.ConfirmSelfRegistrationResponse.SerializeToString,
            ),
            'getValidAppVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getValidAppVersion,
                    request_deserializer=protofile__pb2.getValidAppVersionRequest.FromString,
                    response_serializer=protofile__pb2.getValidAppVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebAuthApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebAuthApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebAuthApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/authenticate',
            protofile__pb2.LoginRequest.SerializeToString,
            protofile__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSecondFactorCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/getSecondFactorCredential',
            protofile__pb2.GetSecondFactorCredentialRequest.SerializeToString,
            protofile__pb2.GetSecondFactorCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def confirmSecondFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/confirmSecondFactor',
            protofile__pb2.ConfirmSecondFactorRequest.SerializeToString,
            protofile__pb2.ConfirmSecondFactorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def retrySendingOtpToLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/retrySendingOtpToLogin',
            protofile__pb2.RetrySendingOtpToLoginRequest.SerializeToString,
            protofile__pb2.RetrySendingOtpToLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def validateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/validateSession',
            protofile__pb2.ValidateSessionRequest.SerializeToString,
            protofile__pb2.ValidateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/setPassword',
            protofile__pb2.SetPasswordRequest.SerializeToString,
            protofile__pb2.SetPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setAnswerForSecurityQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/setAnswerForSecurityQuestion',
            protofile__pb2.SetAnswerForSecQuestionRequest.SerializeToString,
            protofile__pb2.SetAnswerForSecQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def restorePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/restorePassword',
            protofile__pb2.RestorePassRequest.SerializeToString,
            protofile__pb2.RestorePassResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sendOtpDuringRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/sendOtpDuringRestore',
            protofile__pb2.SendOtpDuringRestoreRequest.SerializeToString,
            protofile__pb2.SendOtpDuringRestoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def confirmOtpDuringRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/confirmOtpDuringRestore',
            protofile__pb2.ConfirmOtpDuringRestoreRequest.SerializeToString,
            protofile__pb2.ConfirmOtpDuringRestoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def confirmAnswerForSecurityQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/confirmAnswerForSecurityQuestion',
            protofile__pb2.ConfirmAnswerForSecurityQuestionRequest.SerializeToString,
            protofile__pb2.ConfirmAnswerForSecurityQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/exit',
            protofile__pb2.ExitRequest.SerializeToString,
            protofile__pb2.ExitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def selfRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/selfRegistration',
            protofile__pb2.selfRegistrationRequest.SerializeToString,
            protofile__pb2.selfRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGlobalIbankStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/getGlobalIbankStatus',
            protofile__pb2.getGlobalIbankStatusRequest.SerializeToString,
            protofile__pb2.getGlobalIbankStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def selfRegistrationV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/selfRegistrationV2',
            protofile__pb2.SelfRegistrationRequestV2.SerializeToString,
            protofile__pb2.SelfRegistrationResponseV2.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def confirmSelfRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/confirmSelfRegistration',
            protofile__pb2.ConfirmSelfRegistrationRequest.SerializeToString,
            protofile__pb2.ConfirmSelfRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getValidAppVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAuthApi/getValidAppVersion',
            protofile__pb2.getValidAppVersionRequest.SerializeToString,
            protofile__pb2.getValidAppVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StreamServiceStub(object):
    """////////////////////   STREAM SERVICE
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.beginStream = channel.unary_stream(
                '/dmz_api.StreamService/beginStream',
                request_serializer=protofile__pb2.Empty.SerializeToString,
                response_deserializer=protofile__pb2.StreamInstance.FromString,
                _registered_method=True)


class StreamServiceServicer(object):
    """////////////////////   STREAM SERVICE
    """

    def beginStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'beginStream': grpc.unary_stream_rpc_method_handler(
                    servicer.beginStream,
                    request_deserializer=protofile__pb2.Empty.FromString,
                    response_serializer=protofile__pb2.StreamInstance.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.StreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.StreamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """////////////////////   STREAM SERVICE
    """

    @staticmethod
    def beginStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmz_api.StreamService/beginStream',
            protofile__pb2.Empty.SerializeToString,
            protofile__pb2.StreamInstance.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LogServiceStub(object):
    """////////////////////   LOG SERVICE
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.insertLog = channel.unary_unary(
                '/dmz_api.LogService/insertLog',
                request_serializer=protofile__pb2.LogRequest.SerializeToString,
                response_deserializer=protofile__pb2.LogResponse.FromString,
                _registered_method=True)


class LogServiceServicer(object):
    """////////////////////   LOG SERVICE
    """

    def insertLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insertLog': grpc.unary_unary_rpc_method_handler(
                    servicer.insertLog,
                    request_deserializer=protofile__pb2.LogRequest.FromString,
                    response_serializer=protofile__pb2.LogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.LogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.LogService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogService(object):
    """////////////////////   LOG SERVICE
    """

    @staticmethod
    def insertLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.LogService/insertLog',
            protofile__pb2.LogRequest.SerializeToString,
            protofile__pb2.LogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WebTransferApiStub(object):
    """////////////////////  WEB TRANSFER API SERVICE

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.makeWebTransfer = channel.unary_unary(
                '/dmz_api.WebTransferApi/makeWebTransfer',
                request_serializer=protofile__pb2.IncomingWebTransfer.SerializeToString,
                response_deserializer=protofile__pb2.OutgoingWebTransfer.FromString,
                _registered_method=True)


class WebTransferApiServicer(object):
    """////////////////////  WEB TRANSFER API SERVICE

    """

    def makeWebTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebTransferApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeWebTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.makeWebTransfer,
                    request_deserializer=protofile__pb2.IncomingWebTransfer.FromString,
                    response_serializer=protofile__pb2.OutgoingWebTransfer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebTransferApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebTransferApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebTransferApi(object):
    """////////////////////  WEB TRANSFER API SERVICE

    """

    @staticmethod
    def makeWebTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebTransferApi/makeWebTransfer',
            protofile__pb2.IncomingWebTransfer.SerializeToString,
            protofile__pb2.OutgoingWebTransfer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WebPaymentApiStub(object):
    """////////////////////  WEB PAYMENT API SERVICE
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.makeWebPayment = channel.unary_unary(
                '/dmz_api.WebPaymentApi/makeWebPayment',
                request_serializer=protofile__pb2.IncomingWebPayment.SerializeToString,
                response_deserializer=protofile__pb2.OutgoingWebPayment.FromString,
                _registered_method=True)


class WebPaymentApiServicer(object):
    """////////////////////  WEB PAYMENT API SERVICE
    """

    def makeWebPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebPaymentApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeWebPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.makeWebPayment,
                    request_deserializer=protofile__pb2.IncomingWebPayment.FromString,
                    response_serializer=protofile__pb2.OutgoingWebPayment.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebPaymentApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebPaymentApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebPaymentApi(object):
    """////////////////////  WEB PAYMENT API SERVICE
    """

    @staticmethod
    def makeWebPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebPaymentApi/makeWebPayment',
            protofile__pb2.IncomingWebPayment.SerializeToString,
            protofile__pb2.OutgoingWebPayment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WebDirectoryApiStub(object):
    """////////////////////  WEB DIRECTORY SERVICE

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.makeWebDirectory = channel.unary_unary(
                '/dmz_api.WebDirectoryApi/makeWebDirectory',
                request_serializer=protofile__pb2.IncomingWebDirectory.SerializeToString,
                response_deserializer=protofile__pb2.OutgoingWebDirectory.FromString,
                _registered_method=True)


class WebDirectoryApiServicer(object):
    """////////////////////  WEB DIRECTORY SERVICE

    """

    def makeWebDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebDirectoryApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeWebDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.makeWebDirectory,
                    request_deserializer=protofile__pb2.IncomingWebDirectory.FromString,
                    response_serializer=protofile__pb2.OutgoingWebDirectory.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebDirectoryApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebDirectoryApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebDirectoryApi(object):
    """////////////////////  WEB DIRECTORY SERVICE

    """

    @staticmethod
    def makeWebDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebDirectoryApi/makeWebDirectory',
            protofile__pb2.IncomingWebDirectory.SerializeToString,
            protofile__pb2.OutgoingWebDirectory.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WebUtilityApiStub(object):
    """//////////////////// WEB UTILITY SERVICE
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.makeWebUtility = channel.unary_unary(
                '/dmz_api.WebUtilityApi/makeWebUtility',
                request_serializer=protofile__pb2.IncomingWebUtility.SerializeToString,
                response_deserializer=protofile__pb2.OutgoingWebUtility.FromString,
                _registered_method=True)


class WebUtilityApiServicer(object):
    """//////////////////// WEB UTILITY SERVICE
    """

    def makeWebUtility(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebUtilityApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeWebUtility': grpc.unary_unary_rpc_method_handler(
                    servicer.makeWebUtility,
                    request_deserializer=protofile__pb2.IncomingWebUtility.FromString,
                    response_serializer=protofile__pb2.OutgoingWebUtility.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebUtilityApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebUtilityApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebUtilityApi(object):
    """//////////////////// WEB UTILITY SERVICE
    """

    @staticmethod
    def makeWebUtility(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebUtilityApi/makeWebUtility',
            protofile__pb2.IncomingWebUtility.SerializeToString,
            protofile__pb2.OutgoingWebUtility.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WebAccountApiStub(object):
    """//////////////////// WEB ACCOUNTS SERVICE
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc_tests.Channel.
        """
        self.makeWebAccount = channel.unary_unary(
                '/dmz_api.WebAccountApi/makeWebAccount',
                request_serializer=protofile__pb2.WebAccountsRequest.SerializeToString,
                response_deserializer=protofile__pb2.WebAccountsResponse.FromString,
                _registered_method=True)


class WebAccountApiServicer(object):
    """//////////////////// WEB ACCOUNTS SERVICE
    """

    def makeWebAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebAccountApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeWebAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.makeWebAccount,
                    request_deserializer=protofile__pb2.WebAccountsRequest.FromString,
                    response_serializer=protofile__pb2.WebAccountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmz_api.WebAccountApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmz_api.WebAccountApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebAccountApi(object):
    """//////////////////// WEB ACCOUNTS SERVICE
    """

    @staticmethod
    def makeWebAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmz_api.WebAccountApi/makeWebAccount',
            protofile__pb2.WebAccountsRequest.SerializeToString,
            protofile__pb2.WebAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
